---
description:
globs:
alwaysApply: true
---

docs/rules/cursor-rules.md
# Cursor Workspace Rules

## Scope
- Global to this repo. Apply to all files unless a file-glob subsection overrides.

## Communication Style
- Be terse. Answer first, then minimal context.
- Treat user as expert. Offer alternative solutions proactively (flag speculation).
- No moralizing. Safety only if crucial/non-obvious.
- Prefer code over prose. If editing, show only the relevant hunks before/after.
- Respect existing comments; remove only if obsolete after the change.

## Editing Rules
- Preserve existing indentation characters and width. Never mix tabs/spaces.
- Do not reformat unrelated code. Keep diffs minimal and focused.
- Use multi-line over compressed one-liners when clarity matters.
- Use meaningful names; avoid 1–2 char identifiers.
- Add comments only for “why”, not “how”.

## Tech Stack Guardrails
- Next.js 15 (App Router, Server Components, Server Actions), TypeScript.
- PDF: default `@react-pdf/renderer`. If exact HTML parity is required, add separate Node runtime route with `puppeteer-core` + `@sparticuz/chromium`.
- DB: Supabase Postgres, RLS enabled. ORM: `drizzle-orm` + `drizzle-kit`.
- Auth: Supabase Auth via `@supabase/ssr`.
- UI: Tailwind + shadcn/ui (Radix) + Magic UI. Icons: `lucide-react`.
- Forms/validation: `react-hook-form` + `zod`.
- AI SDK: Vercel AI SDK (`ai`, `@ai-sdk/openai`). Default model: `gpt-5-mini`. Optional upgrade: `gpt-5`.
- JSON Resume: validate with `ajv` in strict mode before save/export.
- Observability: `@sentry/nextjs` optional; rate limit with `@upstash/ratelimit`.

## AI Output & Prompts
- Prefer structured outputs with `zod` schemas.
- For tailoring JSON Resume, enforce schema-bound `generateObject`.
- Cover letters stream via `streamText`. Support a boolean upgrade flag to switch to pro model.
- Store prompt templates in-repo; version changes.

## Terminal & Commands
- Auto-detect `flox`. If available, ALWAYS run:
  - `flox activate -- bash -c "<command>"`
- Never start interactive sessions; always pass non-interactive flags.
- If a command uses a pager, append ` | cat`.
- Long-running jobs must run in background.
- On Windows shell contexts, still route via `flox activate -- bash -c`.

## Data & Secrets
- Never commit secrets. Use `.env.local` and process env accessors.
- For Supabase: never disable RLS. Policies must be explicit.
- Keep schema changes in migrations. Do not ad-hoc edit DB.

## Testing/Quality
- Run ESLint/Prettier on changed files only. Respect repo Prettier config.
- Use `vitest` for unit testing, `playwright` for basic E2E smoke.
- For DB changes, include a migration and an optional seed.

## Next.js Conventions
- Use App Router and RSC by default. Only mark `use client` where necessary.
- Server Actions for mutations; validate inputs with `zod`.
- Place PDF generation in a Node runtime route/handler when using Chromium.

## File/Folder Conventions
- `lib/ai/*`: model selection, prompts, and typed outputs.
- `lib/db/*`: drizzle schema, migrations config.
- `app/(auth)`, `app/(dashboard)`, `app/api/*`: route groups for clarity.
- `types/json-resume.ts`: shared types aligned with JSON Resume spec.

## Performance & Limits
- Apply rate limits per user + per IP for AI endpoints.
- Stream responses when beneficial.
- Cache static assets via Vercel defaults; avoid caching user-specific responses.

## Pull Requests
- Keep PRs small and single-purpose.
- Include rationale and risk notes if touching auth/ai/db.